// replace all ' with ` AFTER minification
const project="Gems 1.1";console.log(`${project} copyright Matto 2024`),console.log("URL PARAMETERS IN HTML MODE: address=0x..., plot=bool, stroke-width=positive-number, signature=bool, invert=bool, random=bool, distance=number"),console.log(`DEFAULT ADDRESS: ${address}`);let plot=!1,invert=!1,strokeWidth=1,distance=10,showSignature=!0,backgroundColor="rgb(25,25,25)",strokeColor="white";const urlParams=new URLSearchParams(window.location.search),urlAddress=urlParams.get("address");if(urlAddress){let t=/^0x[0-9a-fA-F]{40}$/;t.test(urlAddress)&&(address=urlAddress,console.log(`CUSTOM ADDRESS: ${address}`))}const urlPlot=urlParams.get("plot");"true"==urlPlot&&(plot=!0),console.log(`PLOT MODE: ${plot}`);const urlStroke=urlParams.get("stroke-wdith");urlStroke&&(strokeWidth=urlStroke);const urlStrokeWidth=urlParams.get("stroke-width");urlStrokeWidth&&!isNaN(urlStrokeWidth)&&(strokeWidth=urlStrokeWidth),console.log(`STROKE WIDTH: ${strokeWidth}`);const urlSignature=urlParams.get("signature");"false"==urlSignature&&(showSignature=!1),console.log(`SIGNATURE: ${showSignature}`);const urlInvert=urlParams.get("invert");"true"==urlInvert?(invert=!0,backgroundColor="rgb(230,230,230)",strokeColor="black",console.log("INVERT MODE: true")):(backgroundColor="rgb(25,25,25)",strokeColor="white",console.log("INVERT MODE: false"));const urlRandom=urlParams.get("random");"true"==urlRandom&&(address=makeHash(40),console.log(`RANDOM ADDRESS: ${address}`));const urlDistance=urlParams.get("distance");urlDistance&&!isNaN(urlDistance)&&(distance=10*parseInt(urlDistance)),console.log(`DISTANCE: ${distance/10}`);let width=1e3,height=1e3,mid=width/2,hashArray=address.slice(2).split(""),shapes=hashArray.length,points=Array(shapes);for(let i=0;i<shapes;i++)points[i]=[];let spacing=Math.floor((width-10*distance)/shapes),bg=`<g id="background"><desc>Background Color</desc>`,mg1=`<g id="midground-1"><desc>Midground Circles at nodes, stroke-width = 1x.</desc>`,mg2=`<g id="midground-2"><desc>Midground lines at center, stroke-width = 2x.</desc>`,fg=`<g id="foreground"><desc>Foreground shapes, stroke-width = 3x.</desc>`,svg,pens=[`stroke:${strokeColor}; stroke-width:${1*strokeWidth}px; stroke-opacity:0.1;`,`stroke:${strokeColor}; stroke-width:${2*strokeWidth}px; stroke-opacity:0.2;`,`stroke:${strokeColor}; stroke-width:${3*strokeWidth}px; stroke-opacity:1.0;`,],hue=parseInt(hashArray[0],16)/16*360;console.log(`STARTING HUE: ${hue}`);let saturation=100,lightness=50,color;setColor(hue,saturation,lightness);let svgStart=`<?xml version="1.0" encoding="utf-8"?><svg id="${project}" viewBox="0 0 ${width} ${width}" style="background-color:${backgroundColor}; stroke:${strokeColor}; stroke-linecap:round; fill-opacity:0;" xmlns="http://www.w3.org/2000/svg">`,sig=signature();function setColor(t,e,r){color=`hsl(${t},${e}%,${r}%)`}function signature(){let t=`<g id="signature" style="stroke:${strokeColor}; stroke-width:${3*strokeWidth}px; stroke-opacity:1; stroke-linecap:round; fill-opacity:0;" ><desc>Signature, stroke-width = 3x.</desc>`;return t+=`<polyline points="924,956 920,956 920,860 940,872 960,860 960,956 956,956" />`,t+=`<polyline points="928,902 940,872 952,902" stroke-linejoin="bevel" />`,t+=L(934,888,946,888),t+=L(920,902,960,902),t+=L(932,902,932,927),t+=L(948,902,948,927),t+=C(940,940,15),t+="</g>"}for(let i=0;i<shapes;i++){let e=spacing*(shapes-i)/2,r=1+parseInt(hashArray[i],16)%16;if(mg2+=C(mid,mid,e,`${pens[1]}`),1==r)console.log(`Nothing drawn for shape ${i}, shifting color.`),setColor(hue+=22.5,saturation,lightness);else if(2==r)console.log(`Drawing a single circle for shape ${i}.`),points[i].push({mid,mid}),fg+=MC(mid,mid,e,4,`${pens[2]}`);else{console.log(`Drawing ${r} sections for shape ${i}.`),inscribe(i,r,e);let s=`<polygon points="`;for(let o=0;o<r;o++)s+=`${points[i][o].x},${points[i][o].y} `,mg2+=L(points[i][o].x,points[i][o].y,mid,mid,`${pens[1]}`),0==o?fg+=L(points[i][o].x,points[i][o].y,points[i][r-1].x,points[i][r-1].y,`${pens[2]}`):fg+=L(points[i][o].x,points[i][o].y,points[i][o-1].x,points[i][o-1].y,`${pens[2]}`),mg1+=CC(points[i][o].x,points[i][o].y,4*strokeWidth,3,`${pens[0]}`);bg+=`${s}" style="stroke-opacity:0; fill-opacity:.075; fill:${color};" />`;let l=Math.sqrt(Math.pow(points[i][0].x-points[i][1].x,2)+Math.pow(points[i][0].y-points[i][1].y,2));for(let n=0;n<r;n++)bg+=C(points[i][n].x,points[i][n].y,l,`stroke-opacity:0; fill-opacity:.02; fill:${color};`)}}function updateSVG(){let t=document.getElementById(project);t&&t.remove(),svg=plot?`${svgStart}${mg1}${mg2}${fg}`:`${svgStart}${bg}${mg1}${mg2}${fg}`,showSignature?svg+=`${sig}</svg>`:svg+="</svg>",document.body.insertAdjacentHTML("beforeend",svg)}function inscribe(t,e,r){for(let s=0;s<e;s++){let o=s/e*Math.PI*2;o-=Math.PI/2;let l=mid+r*Math.cos(o),n=mid+r*Math.sin(o);points[t].push({x:l,y:n})}}function C(t,e,r,s=""){r<0&&(r=0);let o=`<circle cx="${t}" cy="${e}" r="${r}" `;return""==s?o+="/>":o+=`style="${s}" />`,o}function FC(t,e,r,s=""){let o=`<g style="${s}"><desc>Filled Circle</desc>`,l=.9*strokeWidth;for(let n=r;n>0;n-=l)o+=C(t,e,n);return o+"</g>"}function MC(t,e,r,s,o=""){let l=`<g style="${o}"><desc>Multiple Circles</desc>`,n=.9*strokeWidth;for(let d=0;d<s;d++)l+=C(t,e,r),r-=n;return l+"</g>"}function CC(t,e,r,s,o=""){let l=`<g style="${o}"><desc>Concentric Circles</desc>`;for(let n=1;n<s;n++)l+=C(t,e,r*n);return l+"</g>"}function L(t,e,r,s,o=""){let l=`<line x1="${t}" y1="${e}" x2="${r}" y2="${s}" `;return""==o?l+="/>":l+=`style="${o}" />`,l}function makeHash(t=64){let e="0123456789abcdef",r="";for(let s=0;s<t;s++)r+=e.charAt(Math.floor(Math.random()*e.length));return"0x"+r}function rplc(t,e,r){return t.split(e).join(r)}function saveStrings(t,e,r){let s=new Blob(t,{type:"image/svg+xml"}),o=document.createElement("a");o.href=URL.createObjectURL(s),o.download=`${e}.${r}`,o.click()}bg+="</g>",mg1+="</g>",mg2+="</g>",fg+="</g>",updateSVG(),document.addEventListener("keydown",t=>{let e=t.key.toUpperCase();if("S"===e)saveStrings([svg],plot?`Gems-plot_${address}`:`Gems_${address}`,"svg");else if("H"===e)showSignature=!showSignature,updateSVG();else if("P"===e)plot=!plot,updateSVG();else if("I"===e){let r="black",s="white",o="rgb(25,25,25)",l="rgb(230,230,230)",n=fg,d=mg1,a=mg2,g=svgStart,c=sig;invert?(invert=!1,n=rplc(n,r,s),d=rplc(d,r,s),a=rplc(a,r,s),c=rplc(c,r,s),g=rplc(g,l,o)):(invert=!0,n=rplc(n,s,r),d=rplc(d,s,r),a=rplc(a,s,r),c=rplc(c,s,r),g=rplc(g,o,l)),svgStart=g,mg1=d,mg2=a,fg=n,sig=c,updateSVG()}});